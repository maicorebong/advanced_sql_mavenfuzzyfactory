/** Content Sessions vs. Successful Orders, and Conversion Rate **/
SELECT
	website_sessions.utm_content,
    COUNT(DISTINCT website_sessions.website_session_id) AS sessions, -- how many sessions are there
    COUNT(DISTINCT orders.order_id) AS orders, -- which content drives the orders
    COUNT(DISTINCT orders.order_id)/COUNT(DISTINCT website_sessions.website_session_id) AS session_to_order_conversion_rate -- conversion rate (successful orders or revenue sale against attempts/sessions)
FROM website_sessions
	LEFT JOIN orders
	ON orders.website_session_id = website_sessions.website_session_id
WHERE website_sessions.website_session_id BETWEEN 1000 and 2000
GROUP BY 1 -- using column order as variable name
ORDER BY 2 desc -- using column order as variable name

/** Breakdown of sessions per UTM source, campaign, and referring domain during the first month (email date: April 12, 2012) **/
SELECT
	utm_source,
    utm_campaign,
    http_referer,
    COUNT(DISTINCT website_session_id) AS sessions
FROM website_sessions
WHERE created_at < '2012-04-12'
GROUP BY
	utm_source,
    utm_campaign,
    http_referer
ORDER BY sessions DESC

/** Identifying conversion rate of GSEARCH NON-BRAND as major traffic source. Threshold is 4% as per stakeholder **/
SELECT
	COUNT(DISTINCT orders.order_id) AS orders,
    COUNT(DISTINCT website_sessions.website_session_id) AS sessions,
    COUNT(DISTINCT orders.order_id)/COUNT(DISTINCT website_sessions.website_session_id) AS session_to_order_conv_rate
FROM website_sessions
LEFT JOIN orders
	ON website_sessions.website_session_id = orders.website_session_id
WHERE website_sessions.created_at < '2012-04-14'
AND website_sessions.utm_source = 'gsearch'
AND website_sessions.utm_campaign = 'nonbrand'

/** Identifying traffic source trend and sensitivity to bid changes; Using variables in group by clause that are not in included in the select clause **/
SELECT 
	MIN(DATE(created_at)) AS week_start_date,
	COUNT(DISTINCT website_session_id) AS sessions
FROM website_sessions
WHERE created_at BETWEEN '2012-03-19' AND '2012-05-10'
AND utm_source = 'gsearch'
AND utm_campaign = 'nonbrand'
GROUP BY
	YEAR(created_at),
    WEEK(created_at)
    
/** Bid Optimization for Paid Traffic, Identifying GSEARCH NONBRAND session to order conversion rate by device type (email date: May 11, 2012) **/ 
SELECT
	device_type,
	COUNT(DISTINCT website_sessions.website_session_id) AS sessions,
    COUNT(DISTINCT orders.order_id) AS orders,
    COUNT(DISTINCT orders.order_id)/COUNT(DISTINCT website_sessions.website_session_id) AS session_to_order_conv_rate
FROM website_sessions
LEFT JOIN orders
	ON website_sessions.website_session_id = orders.website_session_id
WHERE website_sessions.created_at < '2012-05-11'
AND utm_source = 'gsearch'
AND utm_campaign = 'nonbrand'
GROUP BY 1

/** Trending with Granular Segments, Weekly Trends per Device Type - Replicating Excel's pivot table using Case and Group By (email date: June 9, 2012) **/ 
SELECT
	MIN(DATE(created_at)) AS week_start_date,
	COUNT(DISTINCT CASE WHEN device_type='desktop' THEN website_session_id ELSE NULL END) AS dtop_sessions,
    COUNT(DISTINCT CASE WHEN device_type='mobile' THEN website_session_id ELSE NULL END) AS mob_sessions
FROM website_sessions
WHERE created_at BETWEEN '2012-04-15' AND '2012-06-09'
AND utm_source = 'gsearch'
AND utm_campaign = 'nonbrand'
GROUP BY
	WEEK(created_at)
    
/** Identifying top website pages (email date: June 9, 2012) **/
SELECT 
	pageview_url,
    COUNT(DISTINCT website_session_id) AS sessions
FROM website_pageviews
WHERE created_at < '2012-06-09'
GROUP BY pageview_url
ORDER BY sessions DESC

/** List of top entry pages an rank by entry volume (email date: June 12, 2012) **/
-- Identify how many times a pageview_id worked as landing page for each distinct session and store in temporary table
CREATE TEMPORARY TABLE first_pageview_entry
SELECT
	website_session_id,
	MIN(website_pageview_id) AS min_pv_id
FROM website_pageviews
WHERE created_at < '2012-06-12'
GROUP BY website_session_id;
-- Apply the corresponding pageview_url for each pageview_id and count the frequency
SELECT
	website_pageviews.pageview_url AS landing_page_url, -- aka "entry page"
    COUNT(DISTINCT first_pageview_entry.website_session_id) AS sessions_hitting_this_landing_page
FROM first_pageview_entry
LEFT JOIN website_pageviews
	ON first_pageview_entry.min_pv_id = website_pageviews.website_pageview_id
GROUP BY website_pageviews.pageview_url
ORDER BY sessions_hitting_this_landing_page DESC;

/** Bounce Rate on Homepage Traffic Landing **/
-- Identify minimum website pageview id associated with each session; Ensure filters are in place
CREATE TEMPORARY TABLE first_pageviews
SELECT
	website_pageviews.website_session_id,
    MIN(website_pageviews.website_pageview_id) AS min_pageview_id
FROM website_pageviews
INNER JOIN website_sessions
	ON website_pageviews.website_session_id = website_sessions.website_session_id
WHERE website_pageviews.created_at < '2012-06-14'
AND pageview_url = '/home'
GROUP BY 
	website_pageviews.website_session_id;
-- Identifying landing page (pageview_url) per session; Ensure filters are in place
CREATE TEMPORARY TABLE session_w_landing_page
SELECT
	first_pageviews.website_session_id,
    website_pageviews.pageview_url AS landing_page
FROM first_pageviews
LEFT JOIN website_pageviews
		ON first_pageviews.website_session_id = website_pageviews.website_session_id -- website pageview is landing page view
WHERE website_pageviews.created_at < '2012-06-14'
AND pageview_url = '/home';
-- Identifying only Bounced Session
CREATE TEMPORARY TABLE bounced_sessions_only
SELECT
	session_w_landing_page.website_session_id,
    session_w_landing_page.landing_page,
    COUNT(website_pageviews.website_pageview_id) AS count_of_pages_viewed
FROM session_w_landing_page
LEFT JOIN website_pageviews
	ON session_w_landing_page.website_session_id = website_pageviews.website_session_id
GROUP BY
	session_w_landing_page.website_session_id,
    session_w_landing_page.landing_page
HAVING COUNT(website_pageviews.website_pageview_id) = 1;
-- Creating summary table
SELECT
	session_w_landing_page.landing_page,
    COUNT(DISTINCT session_w_landing_page.website_session_id) AS sessions,
    COUNT(DISTINCT bounced_sessions_only.website_session_id) AS bounced_sessions,
    COUNT(DISTINCT bounced_sessions_only.website_session_id) / COUNT(DISTINCT session_w_landing_page.website_session_id) AS bounce_rate
FROM session_w_landing_page 
LEFT JOIN bounced_sessions_only
	ON session_w_landing_page.website_session_id = bounced_sessions_only.website_session_id
GROUP BY session_w_landing_page.landing_page
